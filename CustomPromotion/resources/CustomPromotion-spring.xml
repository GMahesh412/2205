<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- custom condtion promotion Translator  bean -->
	<alias alias="customProductConditionTranslator"
		name="defaultCustomProductConditionTranslator" />
	<bean id="defaultCustomProductConditionTranslator"
		class="com.techdenali.promotions.conditions.CustomProductConditionTranslator">
		
	</bean>

	<!-- define spring bean for CustomProductPopulator -->
	<alias name="defaultCustomProductPopulator"
		alias="customProductPopulator" />
	<bean id="defaultCustomProductPopulator"
		class="com.custompromotions.populators.CustomProductPopulator">
	</bean>
	<bean parent="modifyPopulatorList">
		<property name="list" ref="orderEntryRaoConverter" />
		<property name="add" ref="customProductPopulator" />
	</bean>

	<!-- <alias name="defaultCustomProductPopulator" alias="customProductPopulator" 
		/> <bean id="defaultCustomProductPopulator" class="com.custompromotions.populators.CustomProductPopulator" 
		> </bean> <bean parent="modifyPopulatorList"> <property name="list" ref="productConverter" 
		/> <property name="add" ref="customProductPopulator" /> </bean> -->

	<!-- Custom Product Value MApper -->
	<bean id="customProductRuleParameterValueTypeDefinition"
		class="com.custompromotion.mappers.CustomProductValueMapper">
		<property name="flexibleSearchService"
			ref="flexibleSearchService" />
		<property name="delimiter" value=":" />
	</bean>
	<bean id="productRuleParameterValueTypeDefinition"
		class="de.hybris.platform.ruleengineservices.rule.strategies.impl.RuleParameterValueTypeDefinition">
		<property name="mapper"
			ref="customProductRuleParameterValueTypeDefinition" />
		<property name="type" value="ItemType(CustomProduct)" />
	</bean>
	<!-- FlexibleSearchService bean definition, if not already defined -->
	<bean id="flexibleSearchService"
		class="de.hybris.platform.servicelayer.search.impl.DefaultFlexibleSearchService">
		<!-- Configuration for the FlexibleSearchService can be added here if necessary -->
	</bean>



	<!-- <alias name="defaultCPRAOPopulator" alias="cpRAOPopulator" /> <bean 
		id="defaultCPRAOPopulator" class="com.custompromotions.populators.CustomProductRAOPopulator" 
		parent="cartRaoPopulator"> </bean> <bean parent="modifyPopulatorList"> <property 
		name="list" ref="cartRaoConverter" /> <property name="add" ref="cpRAOPopulator" 
		/> </bean> -->

	<!--Configure the customerReviewRaoExtractor bean & Add this bean to cartRAOProviderExtractors -->
<!-- 	<alias name="defaultCustomProductRaoExtractor"
		alias="customProductRaoExtractor" />
	<bean id="defaultCustomProductRaoExtractor"
		class="com.custompromotion.rao.extractors.CustomProductRAOExtractor" />
	<bean
		id="custompromotioncartRAOProviderExtractorsListMergeDirective"
		depends-on="cartRAOProviderExtractors" parent="listMergeDirective">
		<property name="add" ref="customProductRaoExtractor" />
	</bean> -->

	<!-- The hybris platform provides one single Spring application context 
		for beans located at the jalo layer. Each extension can add beans to this 
		context by specifying them at this configuration file. You can use and/or 
		redefine beans defined at configuration files of other extensions as well 
		as adding new one. If you want to locate this file at a different location 
		or want to use several files for better, structuring, please use the '<yourextension>.application-context' 
		property at your project.properties file. There you can specify a comma separated 
		list of files where first is tried to find a file per classpath and then 
		per file system. If you want to configure beans for your web module please 
		have a look at your web/webroot/WEB-INF/<extname>-web-spring.xml. -->

	<!-- Example how to override a manager -->
	<!-- <bean id="core.productManager" class="com.custompromotion.jalo.CustomPromotionProductManager" 
		init-method="init" destroy-method="destroy" /> -->


	<!-- Example how to configure the class to use for jalo session creation -->
	<!-- <bean id="jalosession" class="de.hybris.platform.jalo.JaloSessionFactory"> 
		<property name="targetClassName" value="com.custompromotion.jalo.CustomPromotionJaloSession"/> 
		</bean> -->


	<!-- Example how to override an item -->
	<!-- <bean id="de.hybris.platform.jalo.product.Product" class="com.custompromotion.jalo.CustomPromotionProduct" 
		scope="prototype" /> -->

	<!-- Example how to register and use an AOP aspect Also see http://static.springframework.org/spring/docs/2.5.x/reference/aop.html -->

	<!-- <bean id="CustomPromotionProfBean" class="com.custompromotion.aop.CustomPromotionProfilingAspect"/> 
		<aop:config proxy-target-class="true"> <aop:aspect id="CustomPromotionProfAspect" 
		ref="CustomPromotionProfBean" > <aop:pointcut id="profiledMethods" expression="execution(* 
		getModificationTime(..))" /> <aop:around pointcut-ref="profiledMethods" method="profile" 
		/> </aop:aspect> </aop:config> -->


	<!-- some other examples of a pointcut that matches everything: <aop:pointcut 
		id="profiledMethods" expression="bean(de.hybris.platform.jalo.user.Customer) 
		&amp;&amp; !execution(* getPK(..))" /> <aop:pointcut id="profiledMethods" 
		expression="execution(* *(..))" /> -->

	<bean id="CustomPromotionSystemSetup"
		class="com.custompromotion.setup.CustomPromotionSystemSetup">
		<!-- constructor arg injection example -->
		<constructor-arg ref="CustomPromotionService" />
	</bean>

	<bean id="CustomPromotionService"
		class="com.custompromotion.service.impl.DefaultCustomPromotionService">
		<!-- setter injection example -->
		<property name="modelService" ref="modelService" />
		<property name="mediaService" ref="mediaService" />
		<property name="flexibleSearchService"
			ref="flexibleSearchService" />
	</bean>

</beans>
